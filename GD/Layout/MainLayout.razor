@using GD.Shared.Common
@using GD.Services
@inherits LayoutComponentBase
@inject SignalRService _signalRService
@inject IJSRuntime _js
@inject NavigationManager _navManager
@inject AuthenticationStateProvider _auth

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h6" Class="ml-3">GD</MudText>
        <MudSpacer />
        <MudButton Color="Color.Inherit" OnClick="@(() => _navManager.NavigateTo(string.IsNullOrEmpty(role) ? "/login" : "/acc"))" StartIcon="@Icons.Material.Filled.Person">
            @authMessage
        </MudButton>
        @if (!string.IsNullOrEmpty(role))
        {
            <MudChip T="string" Color="Color.Secondary" Size="Size.Small" Class="ml-2" Text="@role" />
        }
    </MudAppBar>
    
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="py-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    private bool _drawerOpen = true;
    string authMessage = "";
    string role = "";
    
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        
        // Initialize SignalR for client users only
        if (!string.IsNullOrEmpty(role) && role == GDUserRoles.Client)
        {
            await _signalRService.InitializeAsync();
        }
    }

    protected override void OnInitialized()
    {
        GetClaimsPrincipalData();
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await _auth
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name}";
            var claims = user.Claims;
            role = claims.FirstOrDefault(c => c.Type == GDUserClaimTypes.Roles)!.Value;
        }
        else
        {
            authMessage = "Вход";
        }
    }
}
